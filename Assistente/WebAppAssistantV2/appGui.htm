<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>CASA VIVA + APPGUI</title>

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@500&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <!--FontAwesome-->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="js/chat.js"></script>
    <script src="js/help.js"></script>
    
    <style>
      body {
        --indicator-color: black;
        background: #4F5D73; /*radial-gradient(#fff 75%, var(--indicator-color));*/
        min-height: 100vh;
        color: burlywood;
        font-family: Poppins;
        margin: 0;
        padding: 0;
      }
      .mic{
        width: 150px;
      }
      .container {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100%;
        border-radius: 10px;
        background-color: #f0f0f0;
      }

      .responseText{
        border: solid 2px #8ea7cf;
        margin: 2%;
        color: #010101;
      }

      .bottomNav{
        
        position: absolute;
        bottom: 2%;
        width: 95%;
      }
      .recognized{
        font-size:x-large;
      }
      

      .card-head.bg-primary {
        background-color: burlywood !important; /* Sobrescreve o azul primário */
      }
      
      .card-head.text-white {
          color: #4F5D73 !important; /* Sobrescreve o texto branco */
          text-align: center;
      }
    
      #chat-box {
          position : fixed;
          bottom: 100px;
          left : 50%;
          transform: translateX(-50%);
          width: 90%;
          max-width: 500px;
          max-height: 1000px;
          overflow-y: auto;
          /* Permite Scroll Vertical */
      }
      
      #chat-messages {
          margin-right: 15px;
      }

      #chat-button {
        width: 75px;
        height: 75px;
        position: fixed; /* Mantém o botão fixo na tela */
        bottom: 20px; /* Posiciona o botão 20px acima da parte inferior da tela */
        left: 50%; /* Inicia o botão na metade da largura da tela */
        transform: translateX(-50%); /* Desloca o botão para esquerda em 50% de sua própria largura, centralizando-o horizontalmente */
        z-index: 1000; /* Garante que o botão fique acima de outros elementos da página */
        background-color: burlywood;
        border: 2px solid #ffffff;
      }

      #chat-button .fa-message {
        color:#4F5D73 !important; /* Força a cor, mesmo se outras regras de CSS estiverem tentando definir uma cor diferente */
      }
        
      #chat-button:hover {
          background-color:#4F5D73;
          border: 2px solid burlywood !important;
          color: burlywood !important;
      }

      #chat-button:hover .fa-message{
        color: burlywood !important;
      }

      #conteudo {
        background-color: rgb(238, 225, 208);
        width: 90%;
        margin: 0 auto; /* This will center the div if the body has no padding or margin */
        padding: 20px; /* Add some padding inside the div */
        box-shadow: 0 0 15px rgba(0,0,0,0.1); /* Optional: adds a slight shadow for a card-like effect */
        border-radius: 15px;;
        display: flex;
        flex-direction: column;
        align-items: center; /* Centraliza os itens horizontalmente se desejar */
      }
      
      #conteudo h2, #conteudo img, #conteudo table {
        margin-bottom: 20px; /* Ajuste conforme necessário */
      }

      #conteudo th, #conteudo td {
        font-size: 12px; /* Ajuste para o tamanho desejado */
      }

      h1 {
          background-color: #4F5D73;
          color: burlywood;
          text-align: center;
          font-family: 'Florilla Fista', sans-serif;
          text-shadow: 1px 1px 1px black;
      }
      h2 {
          color: black;
          text-align: center;
          font-family: 'Florilla Fista', sans-serif;
          text-shadow: 1px 1px 1px white;
          /* offsetX, offsetY, blurRadius, color */
      }

      #image-container {
        display: flex;
        justify-content: center; /* Centraliza horizontalmente */
        align-items: flex-start; /* Alinha ao topo */
        border-radius: 15px;
      }
    
      #table-container {
          display: flex;
          flex-direction: row; /* Alinha os elementos filhos lado a lado */
          justify-content: center; /* Centraliza os elementos filhos horizontalmente */
          flex-wrap: wrap; /* Permite que os elementos filhos se ajustem conforme a largura do contêiner */
          gap: 5px; /* Adiciona um espaço entre as tabelas */
      }
      
      #table-container table {
        width: auto; /* ou uma largura específica que permita que duas tabelas caibam lado a lado */
        /*max-width: 90%; /* Isso assegura que duas tabelas possam caber lado a lado */
      }
      
      img {
          width: 250px;
          height: 250px;
          border-radius: 15px;
      }
    
      .sender {
        color: #4F5D73;
      }
      
      .message {
          color: grey;
      }

      table {
        /*top : 100%; */
        width: 100%;
        border-collapse: collapse;
      }
      
      th, td {
          border: 1px solid grey;
          padding: 8px;
          text-align: left;
          color: rgb(0, 0, 0);
      }
      
      table th {
        color: #FFFFFF; /* Sets the text color of table headers to white */
      }
  
      thead {
          background-color: #4F5D73;
          color: white !important;
      }

      #help-box {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 90%;
        max-width: 500px;
        max-height: 800px; /* Adjust height as needed */
        overflow-y: auto;
      }
      
      .card-body strong {
          color: #4F5D73; /* Sets the color of <strong> elements within .card-body */
      }

      .card-body li {
          color: black; /* Ensures that <li> elements within .card-body are black */
      }

      #help-button {
        width: 40px;
        height: 40px;
        position: fixed; /* Mantém o botão fixo na tela */
        bottom: 96%; /* Posiciona o botão 20px acima da parte inferior da tela */
        left: 98%; /* Inicia o botão na metade da largura da tela */
        transform: translateX(-50%); /* Desloca o botão para esquerda em 50% de sua própria largura, centralizando-o horizontalmente */
        z-index: 1000; /* Garante que o botão fique acima de outros elementos da página */
        background-color: burlywood;
        color: #4F5D73;
        border: none;
        cursor: pointer;
        border-radius: 10%;
      }

      #help-button:hover {
        background-color:#4F5D73;
        border: 2px solid burlywood !important;
        color: burlywood !important;
      }

      #help-button:hover .fa-message{
        color: burlywood !important;
      }
        #webcam-container {
        margin: auto;
        width: 50%;
    }

    #webcam {
        transform: scaleX(-1); /* Espelha a imagem horizontalmente */
    }

 @keyframes scanner {
  0% { background-position: -100% 0; } 
  100% { background-position: 200% 0; }

}

    #scanner-text {
        text-align: center;
        font-weight: bold;
        color: green;
        background: linear-gradient(90deg, transparent,lime, transparent);
        background-repeat: no-repeat;
        background-size: 50% 100%;
        animation: scanner 2s linear infinite;
    }

    #product-card {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        background-color: transparent;
        border: none;
       
    }

      
    </style>

  </head>
  <body>
    <h1 style="background-color: #4F5D73; margin: 0;">CASA VIVA + APP GUI</h1>
    
    <!-- Help Button -->
    <button id="help-button" type="button" class="bi bi-app">
      <i class="fa fa-info fa-2x"></i>
    </button>
    
    <!-- Help Pop-up Window -->
    <div id="help-box" class="card position-fixed shadow d-none">
      <div class="card-head bg-primary text-white">
        Instruções de Uso Básicas
          <button id="help-close" type="button" class="btn-close float-end" aria-label="Close"></button>
      </div>
        <div class="card-body">
          <!-- Help instructions -->
          <ol>
              <li><strong>Ativação do Assistente:</strong>
                  <ul>
                      <li>Viva</li>
                      <li>Olá, Assistente</li>
                      <li>Mais exemplos de cumprimentos em linguagem natural aceites</li>
                  </ul>
              </li>
              <li><strong>Solicitação de Receitas:</strong>
                  <ul>
                      <li><strong>SUGESTÃO:</strong>
                          <ul>
                              <li>Quero um sugestão de receita</li>
                              <li>Sugere-me algo</li>
                          </ul>
                      </li>
                      <li><strong>Por tag:</strong>
                          <ul>
                              <li>Quero uma receita de [bacalhau]</li>
                              <li>Mostra-me uma receita de [peixe]</li>
                          </ul>
                      </li>
                      <li>Mais exemplos de solicitação em linguagem natural aceites</li>
                  </ul>
              </li>
              <li><strong>Iniciar a preparação da Receita (previamente escolhida):</strong>
                  <ul>
                      <li>Vamos começar a cozinhar</li>
                      <li>Vamos começar com a receita</li>
                      <li>Mais exemplos de Iniciar em linguagem natural aceites</li>
                  </ul>
              </li>
              <li><strong>Prosseguir para o próximo passo:</strong>
                  <ul>
                      <li>Avança para o próximo passo</li>
                      <li>Acabei este passo dá-me o próximo</li>
                      <li>Mais exemplos de Avançar em linguagem natural aceites</li>
                  </ul>
              </li>
              <li><strong>Repetir um passo:</strong>
                  <ul>
                      <li>Repete por favor</li>
                      <li>Não percebi, podes repetir</li>
                      <li>Mais exemplos de Repetir em linguagem natural aceites</li>
                  </ul>
              </li>
              <li><strong>Desativação do Assistente:</strong>
                  <ul>
                      <li>Adeus assistente</li>
                      <li>tchau assistente</li>
                      <li>Mais exemplos de Despedida em linguagem natural aceites</li>
                  </ul>
              </li>
              <li><strong>BONUS : PIADAS</strong>
                  <ul>
                      <li>Conta-me um piada</li>
                      <li>Conta-me uma anedota</li>
                      <li>Mas exemplos de Pedido de Piadas em linguagem natural aceites</li>
                  </ul>
              </li>
          </ol>
        </div>
    
    </div>

    <div>
      
      <div id = "conteudo">
        <!--PARA POSTERIORMENTE APARECEREM A IMAGEM-->  
        
        <div id="title">

        </div>
        
        <div id="image-container">

        </div>

        <div id="table-container">

        </div>

        <div id="webcam-container">
          <canvas id="canvas" style="display:none;"></canvas>
        
      </div>

      <!--ChatBox-->
      <div id="chat-box" class="card position-fixed shadow d-none">
          <div class="card-head bg-primary text-white">
              KitchenAssistant
              <!-- <button id="close" type="button" class="btn-close float-end" aria-label="Close"></button> -->
  
          </div>
  
          <div id="chat-messages" class="card-body">
              <!-- Mensagens do chat aparecerão aqui-->
  
          </div>
  
          <div class="card-footer">
              <input id="chat-input" type="text" class="form-control" placeholder="Digite sua mensagem">
  
          </div>
      </div>

      <button id="chat-button" type="button" class="btn btn-primary rounded-circle position-fixed chat-sign-button">
        <i class="fa-regular fa-message fa-2x"></i>
      </button>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/@svgdotjs/svg.js@latest/dist/svg.min.js"></script>
    <script src="js/mmi.js"></script>
    <script src="js/globals.js"></script>
    <script src="js/jquery-3.6.4.min.js"></script>
    <script src="js/webtoolkit.utf8.js"></script>
    
    
    <script type="module">
        var mmiCli_Out_add = "wss://"+host+":8005/IM/USER1/";
        var mmiCli_Out = null;
        // Global dictionary to store the products before adding them to the pantry
        let product = {
            name: null,
            quantity: null,
            unit: null,
            expiration_date: null
        };

        // Global email object to store the email configuration
        let email = {
            from_addr: "kitchen_assistant@outlook.com",
            to_addr: "inesaguia@ua.pt",
            subject: null,
            body: null,
            smtp_server: "smtp-mail.outlook.com",
            smtp_port: 587,
            password: "kitchen123."
        };


        mmiCli_Out = new MMIClientSocket(mmiCli_Out_add + "APP");
        mmiCli_Out.onMessage.on(im1MessageHandler);
        mmiCli_Out.onOpen.on(socketOpenHandler);
        mmiCli_Out.openSocket();


        function socketOpenHandler(event) {
            console.log("---------------openSocketHandler---------------")

            if(mmiCli_Out.socket.readyState !== WebSocket.OPEN){
                return;
            }
        }
        
        function openHelpBox() {
        $("#help-box").removeClass("d-none");
        }

        function closeHelpBox() {
        $("#help-box").addClass("d-none");
        }

        function openChatBox() {
        $("#chat-box").removeClass("d-none");
        }

        function closeChatBox() {
            $("#chat-box").addClass("d-none");
        }
            
        function clearChatMessages() {
        $("#chat-messages").empty();
        }

        function addMsgToChat(user, message){
        // Determine the sender
        let sender = user;
        // Append the message to the chat
        $("#chat-messages").append(`<div><strong class="sender">${sender}:</strong> <span class="message">${message}</span></div>`);
        }

        function clearContent() {
            document.getElementById("title").innerHTML = "";
            document.getElementById("image-container").innerHTML = "";
            document.getElementById("table-container").innerHTML = "";
            }
            
        function addRecipeName(recipe_name) {
        let container = document.getElementById("title");
        // Verifica se já existe um elemento h2 dentro do contêiner
        let existingH2 = container.querySelector("h2");

        // Se já existir um h2, atualiza o texto
        if (existingH2) {
            existingH2.textContent = recipe_name;
        } else {
            // Se não, cria um novo h2 e adiciona ao contêiner
            let name = document.createElement("h2");
            name.textContent = recipe_name;
            container.appendChild(name);
        }
        }

        function addImage(img_url) {
        let container = document.getElementById("image-container");
        // Verifica se já existe uma imagem dentro do contêiner
        let existingImg = container.querySelector("img");

        // Se já existir uma imagem, atualiza o atributo src
        if (existingImg) {
            existingImg.src = img_url;
        } else {
            // Se não, cria uma nova imagem e adiciona ao contêiner
            let img = document.createElement("img");
            img.src = img_url;
            container.appendChild(img);
        }
        }

        function addIngredientsTable(ingredients) {
            let container = document.getElementById("table-container");
            // Verifica e remove a tabela existente de ingredientes
            let existingTable = container.querySelector("#ingredients-table");
            if (existingTable) {
                container.removeChild(existingTable);
            }

            // Cria a nova tabela de ingredientes
            let table = document.createElement("table");
            table.id = "ingredients-table"; // Adiciona um ID único
            let thead = document.createElement("thead");
            let tbody = document.createElement("tbody");
            let rowHead = document.createElement("tr");

            // Define os títulos das colunas
            let headers = ["Ingrediente", "Valor", "Quantidade"];
            headers.forEach(headerText => {
                let header = document.createElement("th");
                header.textContent = headerText;
                rowHead.appendChild(header);
            });

            thead.appendChild(rowHead);
            table.appendChild(thead);

            // Adiciona os dados dos ingredientes no corpo da tabela
            ingredients.forEach(ingredient => {
                let row = document.createElement("tr");
                
                let nameCell = document.createElement("td");
                nameCell.textContent = ingredient.name;
                row.appendChild(nameCell);
                
                let quantityCell = document.createElement("td");
                quantityCell.textContent = ingredient.quantity;
                row.appendChild(quantityCell);
                
                let unitCell = document.createElement("td");
                unitCell.textContent = ingredient.unit;
                row.appendChild(unitCell);
                
                tbody.appendChild(row);
            });

            table.appendChild(tbody);
            container.appendChild(table);
        }

        function addToolsTable(tools) {
            let container = document.getElementById("table-container");
            // Verifica e remove a tabela existente de utensílios
            let existingTable = container.querySelector("#tools-table");
            if (existingTable) {
                container.removeChild(existingTable);
            }

            // Cria a nova tabela de utensílios
            let table = document.createElement("table");
            table.id = "tools-table"; // Adiciona um ID único
            let thead = document.createElement("thead");
            let tbody = document.createElement("tbody");
            let rowHead = document.createElement("tr");
            let header = document.createElement("th");
            header.textContent = "Utensílios";
            rowHead.appendChild(header);
            thead.appendChild(rowHead);
            table.appendChild(thead);

            // Adiciona os dados dos utensílios no corpo da tabela
            tools.forEach(tool => {
                let row = document.createElement("tr");
                let cell = document.createElement("td");
                cell.textContent = tool[0]; // Considerando que cada ferramenta é um elemento em um array
                row.appendChild(cell);
                tbody.appendChild(row);
            });

            table.appendChild(tbody);
            container.appendChild(table);
        }

        function addShoopingListTable(list) {
            let container = document.getElementById("table-container");
            // Verifica e remove a tabela existente
            let existingTable = container.querySelector("#tools-table");
            if (existingTable) {
                container.removeChild(existingTable);
            }

            // Cria a nova tabela de compras
            let table = document.createElement("table");
            table.id = "tools-table"; // Adiciona um ID único para a tabela de compras
            let thead = document.createElement("thead");
            let tbody = document.createElement("tbody");
            let rowHead = document.createElement("tr");
            let header = document.createElement("th");
            header.textContent = "Lista de Compras"; // Altera o título para Lista de Compras
            rowHead.appendChild(header);
            thead.appendChild(rowHead);
            table.appendChild(thead);

            // Adiciona os itens da lista de compras no corpo da tabela
            list.forEach(item => {
                let row = document.createElement("tr");
                let cell = document.createElement("td");
                cell.textContent = item; // Adiciona cada item da lista na célula
                row.appendChild(cell);
                tbody.appendChild(row);
            });

            table.appendChild(tbody);
            container.appendChild(table);
        }
        
        function addPantryTable(list) {
            let container = document.getElementById("table-container");
            // Verifica e remove a tabela existente da despensa
            let existingTable = container.querySelector("#ingredients-table");
            if (existingTable) {
                container.removeChild(existingTable);
            }
        
            // Cria a nova tabela da despensa
            let table = document.createElement("table");
            table.id = "ingredients-table"; // Adiciona um ID único
            let thead = document.createElement("thead");
            let tbody = document.createElement("tbody");
            let rowHead = document.createElement("tr");
        
            // Define os títulos das colunas
            let headers = ["Produto", "Quantidade", "Data de Validade"];
            headers.forEach(headerText => {
                let header = document.createElement("th");
                header.textContent = headerText;
                rowHead.appendChild(header);
            });
        
            thead.appendChild(rowHead);
            table.appendChild(thead);
        
            // Adiciona os dados da despensa no corpo da tabela
            list.forEach(item => {
                let row = document.createElement("tr");
        
                // Divide a string pelo padrão: ", Data de Validade : "
                let parts = item.split(", Data de Validade : ");
                let productAndQuantity = parts[0].split(' ');
                let quantity = productAndQuantity.pop(); // Último elemento é a quantidade
                let product = productAndQuantity.join(' '); // O restante é o nome do produto
                let expirationDate = parts[1];
        
                // Célula do produto
                let productCell = document.createElement("td");
                productCell.textContent = product;
                row.appendChild(productCell);
        
                // Célula da quantidade
                let quantityCell = document.createElement("td");
                quantityCell.textContent = quantity;
                row.appendChild(quantityCell);
        
                // Célula da data de validade
                let dateCell = document.createElement("td");
                dateCell.textContent = expirationDate;
                row.appendChild(dateCell);
        
                tbody.appendChild(row);
            });
        
            table.appendChild(tbody);
            container.appendChild(table);
        }
        
        function addRecipesTable(recipes) {
            let container = document.getElementById("table-container");
            // Verifica e remove a tabela existente de receitas
            let existingTable = container.querySelector("#recipes-table");
            if (existingTable) {
                container.removeChild(existingTable);
            }
        
            // Cria a nova tabela de receitas
            let table = document.createElement("table");
            table.id = "recipes-table"; // Adiciona um ID único
            let thead = document.createElement("thead");
            let tbody = document.createElement("tbody");
            let rowHead = document.createElement("tr");
        
            // Define os títulos das colunas
            let headers = ["Receita", "Serviços", "Tempo de Preparação"];
            headers.forEach(headerText => {
                let header = document.createElement("th");
                header.textContent = headerText;
                rowHead.appendChild(header);
            });
        
            thead.appendChild(rowHead);
            table.appendChild(thead);
        
            // Adiciona os dados das receitas no corpo da tabela
            recipes.forEach(recipe => {
                let row = document.createElement("tr");
                
                let nameCell = document.createElement("td");
                nameCell.textContent = recipe.recipe_name;
                row.appendChild(nameCell);
                
                let servingsCell = document.createElement("td");
                servingsCell.textContent = recipe.recipe_servings;
                row.appendChild(servingsCell);
                
                let timeCell = document.createElement("td");
                timeCell.textContent = recipe.recipe_time + ' min';
                row.appendChild(timeCell);
                
                tbody.appendChild(row);
            });
        
            table.appendChild(tbody);
            container.appendChild(table);
        }

        function convertDateToSQLFormat(dateString) {
            // Split the string by '/' and ' ' to extract day, month, and year
            const parts = dateString.split(/[/\s]/); // This regex splits at '/' or space
            const day = parts[0];
            const month = parts[1];
            const year = parts[2];
        
            // Construct a new date string in SQL DATE format (YYYY-MM-DD)
            // Pad the month and day with '0' if they are less than 10
            const formattedDate = `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
        
            return formattedDate;
        }

        function reset_product() {
            product = {
                name: null,
                quantity: null,
                unit: null,
                expiration_date: null
            };
        }
        
        function checkType(product_name) {
            for(const plant of plant_products){
                if (plant.includes(product_name)){
                    return "plant";
                }
            }
            for(const animal of animal_products){
               if (animal.includes(product_name)){
                    return "animal";
                }
            }
            return "others"
        }

        /* FUNCTION : SET EXPIRATION DATE
            return the expiration date in the format YYYY-MM-DD
        */
        function set_expiration_date(ndays){
            let today = new Date();
            let expiration_date = today.setDate(today.getDate() + ndays);
        
            expiration_date = today.toISOString().slice(0,10) //Obter apenas ano,mês e dia
            
            return expiration_date
        }

        /* FUNCTION : ALERT EXPIRATION DATE
            return TRUE is the expiration date is less than 3 days
            return FALSE if the expiration date is more than 3 days
        */
        function alert_expiration_date(expiration_date){
            let today = new Date();
            expiration_date = new Date(expiration_date);
            
            let date_dif = Math.abs(today.getTime() - expiration_date.getTime()); //Diferença de datas em millisegundos
            date_dif  = Math.ceil(date_dif  / (1000 * 3600 * 24));//Diferença de datas em dias
            if (date_dif <=3){
                return true;
            }
            return false;
        }

        /* FUNCTION : GET NEAR EXPIRATION DATE PRODUCTS
            return a list of products that are near the expiration date
        */
        function get_near_expiration_date_products(product_list){
            let near_expiration_date_products = [];
            for (let i = 0; i < product_list.length; i++){
                let product = product_list[i].split(":");
                let product_date = product[product.length-1];
                let near_expired = alert_expiration_date(product_date);
                if (near_expired){
                    near_expiration_date_products.push(product_list[i]);
                }
            }
            return near_expiration_date_products;
        }

        /* FUNCTION : CREATE EMAIL BODY
            return the body of the email with a table of products
        */
        function createEmailBody(alertType, list) {
            let body = `<html><body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">`;
        
            if (alertType === 'expiration') {
                body += `
                    <h1>Alerta: Produtos Perto do Fim da Validade!</h1>
                    <p>Caro cliente, informamos que os seguintes produtos estão próximos da sua data de validade:</p>
                    <ul>`;
                list.forEach(item => {
                    body += `<li>${item}</li>`;
                });
                body += `</ul>
                    <p>Por favor, verifique estes produtos e aproveite-os enquanto estão frescos!</p>`;
            } else if (alertType === 'shoopinglist') {
                body += `
                    <h1>Lista de Compras</h1>
                    <p>Caro cliente, aqui está a sua lista de compras para que não se esqueça de nada:</p>
                    <ul>`;
                list.forEach(item => {
                    body += `<li>${item}</li>`;
                });
                body += `</ul>`;
            }
        
            body += `
                <p>Este email foi enviado automaticamente pelo <strong>Kitchen Assistant</strong>. Não responda a este email.</p>
                <footer><p>Com os melhores cumprimentos,</p><p><strong>Equipa Kitchen Assistant</strong></p></footer>
                </body></html>`;
            
            return body;
            //return body.replace(/"/g, '\\"');
        }

        /* FUNCTION : SEND EMAIL
            return a message to the user (email sent or not)
        */
        async function send_email(alertType, list){
            if (alertType === "expiration"){
                email["subject"] = "Produtos a expirar - Kitchen Assistant";
                email["body"] = createEmailBody(alertType, list);
                console.log("BODY: ", email["body"]);
            }
            else if (alertType === "shoopinglist"){
                email["subject"] = "Lista de compras - Kitchen Assistant";
                email["body"] = createEmailBody(alertType, list);
                console.log("BODY: ", email["body"]);
            }

            const response = await fetch('http://127.0.0.1:5000/send-email',
            {
                method: 'POST',
                
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(email)
            });

        }

        /* FUNCTION : GET ALL PRODUCTS IN THE PANTRY
        RETURN: 
        [
            "Azeite 1.0 l, Data de Validade : 2024/12/31",
            "Rhubarb Sparkling Water 250.0 mL, Data de Validade : 2050/05/21"
        ]*/
        async function get_pantry_products(){
            const response = await fetch('http://127.0.0.1:5000/pantry/stock');
            const data = await response.json();
            console.log("DATA INSIDE GET FUNCTION: ", data);
            return data;
        }

        /* FUNCTION : GET SHOPPING LIST
        [
            "Azeite",
            "Rhubarb Sparkling Water"
        ]
        */
        async function get_shopping_list(){
            const response = await fetch('http://127.0.0.1:5000/pantry/shopping-list');
            const data = await response.json();
            console.log("DATA INSIDE GET FUNCTION: ", data);
            return data;
        }

        async function insert_stock() {
            
            const response = await fetch('http://127.0.0.1:5000/pantry/insert-stock', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(product)
            });
            const data = await response.json();
            console.log("DATA INSIDE GET FUNCTION: ", data);
        }

        async function remove_stock() {
            const response = await fetch('http://127.0.0.1:5000/pantry/remove-stock', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(product)
            });
        }

        /* FUNCTION : GET RANDOM RECIPE
        RETURN: 
        {
        "recipe_id": ,
        "recipe_img": ,
        "recipe_name": 
        }*/
        async function getRandRecipe() {
            const response = await fetch('http://127.0.0.1:5000/recipe/random');
            const data = await response.json();
            console.log("DATA INSIDE GET FUNCTION: ", data);
            return data;
        }

        async function getProduct_scanner(frame) {
            // Remove o prefixo de dados da string base64
            const frameData = frame.replace(/^data:image\/\w+;base64,/, "");

            const response = await fetch("http://127.0.0.1:5000/scanner", {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ frameData })
            });
            const data = await response.json();
            console.log("DATA INSIDE GET FUNCTION: ", data);
            return data;
    }

        async function takeSnapshot() {
            let product_info;
            const webcam_container = document.getElementById("webcam-container");
            // Criar um elemento de vídeo (webcam)
            const video = document.createElement("video");

            //Configuração do video
            video.id = "webcam";
            video.width = 640;
            video.height = 480;
            video.autoplay = true;
            webcam_container.appendChild(video); //Adiciona o video ao container

            const canvas = document.getElementById("canvas");
            const scanner_text = document.createElement("h2");

            //Configuração do texto do scanner
            scanner_text.id = "scanner-text";
            webcam_container.appendChild(scanner_text);


            const context = canvas.getContext("2d");
            
            const product_card = document.createElement("div");




            let stream;
            try {
                stream = await navigator.mediaDevices.getUserMedia({ video: true });
                video.srcObject = stream;
            } catch (err) {
                console.error('Error accessing the webcam: ', err);
                return;
            }

            return new Promise((resolve, reject) => {
                video.onloadedmetadata = async function() {
                    while (true) {
                        canvas.width = video.videoWidth;
                        canvas.height = video.videoHeight;
                        context.drawImage(video, 0, 0, canvas.width, canvas.height);

                        const frame = canvas.toDataURL("image/jpeg", 1); //O 0.8 é a qualidade da imagem e foi usado o formato jpeg para reduzir o tamanho da imagem

            
                        try {
                            product_info= await getProduct_scanner(frame); //[product_name, product_quantity, product_image]
                            scanner_text.innerHTML = "Lendo o côdigo de barras do produto... " 
                        } catch (err) {
                            console.error('Error getting product scanner: ', err);
                            reject(err);
                            return;
                        }
                        
                        if (product_info) {
                            //const answer = "O produto " + product_info[0]+" com a quantidade " + product_info[1]+ " à despensa";
                            product["name"] = product_info[0];
                            const new_quantity = product_info[1].split(" ",2);
                            product["quantity"] = new_quantity[0];
                            product["unit"] = new_quantity[1];
                            //addMsgToChat("Assistente", "nome : " + product["name"]);
                            //addMsgToChat("Assistente", "Quantidade: " + product["quantity"]);
                            //addMsgToChat("Assistente", "Unidade : " + product["unit"]);
                            
                            const info = "D"
                            
                            //Configuração do card do produto
                            product_card.id = "product-card";
                            webcam_container.appendChild(product_card);
                            
                            //Adiciona a imagem do produto e o nome do produto ao card
                            const product_image = document.createElement("img");
                            const product_name = document.createElement("h2");
                            product_card.appendChild(product_image);
                            product_card.appendChild(product_name);

                            product_image.src = product_info[2]; //Adiciona a imagem do produto ao card
                            product_name.textContent = product_info[0] + " " + product_info[1]; //Adiciona o nome do produto ao card
                            resolve(product_info);
                            return;
                        }

                        await new Promise(resolve => setTimeout(resolve, 1000)); // Delay
                    }
                };
            }).finally(() => {
                if (stream) {
                    stream.getTracks()[0].stop(); //Para o video
                    video.parentElement.removeChild(video); //Remove o video da página html
                    scanner_text.parentElement.removeChild(scanner_text); //Remove o texto do scanner da página html
                    
            

                }
            });
    }

        /* FUNCTION : GET ALL RECIPES
        RETURN: 
        [
        {
            "recipe_name": ,
            "recipe_servings": ,
            "recipe_time":
        },
        {
            "recipe_name": ,
            "recipe_servings": ,
            "recipe_time":
        },
        {
            "recipe_name": ,
            "recipe_servings": ,
            "recipe_time":
        },
        ... 
        ]*/
        async function getAllRecipes() {
        const response = await fetch('http://127.0.0.1:5000/recipes');
        const data = await response.json();
        console.log("All Recipes: ", data);
        return data;
        }

        /* FUNCTION : GET RECIPES BY TAG
        RETURN: 
        {
        "recipe_ids": [id]
        }*/
        async function getRecipesByTag(tag) {
        const response = await fetch(`http://127.0.0.1:5000/recipe/tag/${tag}`);
        const data = await response.json();
        console.log(`Recipes with tag ${tag}: `, data);
        return data;
        }

        /* FUNCTION : GET RECIPES BY NAME - NOT WORKING -
        RETURN: 
        {
        "recipe_id": 
        }*/
        async function getRecipeByName(name) {
        const response = await fetch(`http://127.0.0.1:5000/recipe/name/${encodeURIComponent(name)}`);
        const data = await response.json();
        console.log(`Recipe named ${name}: `, data);
        return data;
        }

        /* FUNCTION : GET INGREDIENTS BY RECIPE_ID
        RETURN: 
        [
        {
            "name": "ingredient1",
            "quantity": "4.00",
            "unit": "uni"
        },
        {
            "name": "ingredient2",
            "quantity": "4.00",
            "unit": "uni"
        },
        ... 
        ]*/
        async function getIngredients(recipeId) {
        const response = await fetch(`http://127.0.0.1:5000/recipe/${recipeId}/ingredients`);
        const data = await response.json();
        console.log(`Ingredients for recipe ID ${recipeId}: `, data);
        return data;
        }

        /* FUNCTION : GET TOOLS BY RECIPE_ID
        RETURN: 
        [
        [
            "tool1"
        ],
        [
            "tool2"
        ],
        ...
        ]*/
        async function getTools(recipeId) {
        const response = await fetch(`http://127.0.0.1:5000/recipe/${recipeId}/tools`);
        const data = await response.json();
        console.log(`Tools for recipe ID ${recipeId}: `, data);
        return data;
        }

        /* FUNCTION : GET NEXT INSTRUCTION BY RECIPE_ID AND STEP
        STEP = 0 -> FIRST INSTRUCTION (STEP 1)
        STEP = 1 -> SECOND INSTRUCTION (STEP 2)
        ...
        STEP = N -> N+1 INSTRUCTION (STEP N+1) -> RETURN NULL
        RETURN: 
        {
        "next_instruction": "instruction"
        }*/
        async function getNextInstruction(recipeId, step) {
        const response = await fetch(`http://127.0.0.1:5000/recipe/${recipeId}/next-instruction/${step}`);
        const data = await response.json();
        console.log(`Next instruction for recipe ID ${recipeId} and step ${step}: `, data);
        return data;
        }

        /* FUNCTION : GET PREVIOUS INSTRUCTION BY RECIPE_ID AND STEP
        STEP = 0 -> FIRST INSTRUCTION (STEP -1) -> RETURN NULL
        STEP = 1 -> SECOND INSTRUCTION (STEP 0) -> RETURN NULL
        STEP = 2 -> THIRD INSTRUCTION (STEP 1) -> RETURN FIRST INSTRUCTION
        ...
        STEP = N -> N-1 INSTRUCTION (STEP N) -> RETURN N INSTRUCTION
        RETURN: 
        {
        "previous_instruction": "instruction"
        }*/
        async function getPreviousInstruction(recipeId, step) {
        const response = await fetch(`http://127.0.0.1:5000/recipe/${recipeId}/previous-instruction/${step}`);
        const data = await response.json();
        console.log(`Previous instruction for recipe ID ${recipeId} and step ${step}: `, data);
        return data;
        }

        /* FUNCTION : GET ACTUAL INSTRUCTION BY RECIPE_ID AND STEP
        STEP = 0 -> 0 INSTRUCTION (STEP -1) -> RETURN NULL
        STEP = 1 -> FIRST INSTRUCTION (STEP 1) -> RETURN FIRST INSTRUCTION
        STEP = 2 -> SECOND INSTRUCTION (STEP 2) -> RETURN SECOND INSTRUCTION
        ...
        STEP = N -> N INSTRUCTION (STEP N) -> RETURN N INSTRUCTION
        RETURN: 
        {
        "previous_instruction": "instruction"
        }*/
        async function getActualInstruction(recipeId, step) {
        const response = await fetch(`http://127.0.0.1:5000/recipe/${recipeId}/actual-instruction/${step}`);
        const data = await response.json();
        console.log(`Actual instruction for recipe ID ${recipeId} and step ${step}: `, data);
        return data;
        }

        /* FUNCTION : GET RECIPE NAME BY RECIPE_ID
        RETURN: 
        {
        "recipe_name": "name"
        }*/
        async function getRecipeName(recipeId) {
            const response = await fetch(`http://127.0.0.1:5000/recipe/${recipeId}/name`);
            const data = await response.json();
            console.log("CHEGAMOS AQUIIIII");
            console.log(`Name for recipe ID ${recipeId}: `, data);
            return data;
        }

        /* FUNCTION : GET RECIPE IMAGE BY RECIPE_ID
        RETURN: 
        {
        "recipe_img": "url"
        }*/
        async function getRecipeImage(recipeId) {
        try {
            const response = await fetch(`http://127.0.0.1:5000/recipe/${recipeId}/image`);
            if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();
            console.log(`Image URL for recipe ID ${recipeId}: `, data);
            return data;
        } catch (error) {
            console.error("Error fetching recipe image: ", error);
            return null; // Or handle the error as needed
        }
        }

        /* FUNCTION : GET RAMDOM JOKE
            RETURN: 
            'joke'*/
        function getRandJoke() {
                let joke = jokes[Math.floor(Math.random() * jokes.length)];
                console.log("Joke: ", joke);
                return joke;
        }

        var recipe_id = 0;
        var step = 1;
        var voice;
        var add_pdb_flag = false;
        var remove_pdb_flag = false;
        var alerted = false;
        var active_assistant = false;
        var s_list = null;
        var p_list = null;
        var answer = null;


        const jokes = [
            'Eu gosto tanto de comida que meu super herói preferido é o super mercado.',
            'O que disse a farinha para o fermento? "Sem ti, a minha vida não cresce."',
            'Legumes?!! É isso que a minha comida come.',
            'Porque é que a manteiga não entrou na discoteca? Porque foi barrada.',
            'Qual o nome do peixe que caiu do vigésimo andar? Aaaaaaaaah, Tum!'
        ];

        /* All Types of PLANT products */
        const plant_products = [
            'maçãs', 'bananas', 'cenouras', 'batatas', 'tomates', 'alface', 'cebolas', 'trigo', 
            'arroz', 'milho', 'soja', 'aveia', 'abacates', 'morangos', 'laranjas', 'limões', 'uvas',
            'amêndoas', 'castanhas', 'nozes', 'pimentões', 'couve', 'espinafre', 'feijão', 'ervilhas', 
            'pepinos', 'abóboras', 'melancias', 'mangas', 'pêssegos'
        ];

        /* All Types of ANIMAL products */
        const animal_products = [
            'galinha', 'frango', 'peixe', 'salmão', 'polvo', 'porco', 'vaca', 'cordeiro',
            'carneiro', 'bacalhau', 'camarão', 'lagosta', 'atum', 'truta', 'siri', 'mexilhão',
            'ostra', 'pato', 'peru', 'coelho', 'cervo', 'javali', 'faisão', 'codorniz', 'arenque' 
        ];

        async function im1MessageHandler(data){

            console.log("--------------im1MessageHandler---------------");

            if(data != null && data!="RENEW" && data!="OK"){
                //console.log(data);
                var content = $(data).find("emma\\:interpretation").first().text().trim();
                console.log("CONTENTE ------> "+content);
                if (typeof content == 'string') {
                    try {
                        // Try to parse XML
                        //console.log("INSIDE TRY CATCH: " + content);

                        //$("#response").html(content);
                        //$("#response").addClass("container");
                        //$("#response").addClass("responseText");
                        //console.log("CONTENT: ", content.intent);
                        // Parse JSON from XML content index.htm
                        let c = JSON.parse(content);
                        //let recipe;
                        
                        //console.log("C : ", c);
                        closeHelpBox(); // -------------------------------------------------------- Close the help box
                        if(c.hasOwnProperty("nlu")){
                            //console.log("NLU: ", c.nlu);
                            //console.log("NLU INTENT: ", c.nlu.intent);

                            const product_card = document.getElementById("product-card");
                            if (product_card) {
                                product_card.parentElement.removeChild(product_card); //Remove o card do produto da página html
                                //Isto deve-se ao facto deste elemento ser criado sempre que é lido um código de barras
                                //E tem de ser removido depois da leitura do código de barras
                            }
                            
                            if(c.nlu.intent == "greet"){
                                active_assistant = true; // ---------------------------------------------------------------- Activate the assistant when the user greets
                            }

                            

                            if (active_assistant){ // ----------------------------------------------------------------------- Check if the assistant is active

                                switch(c.nlu.intent){
                                    case "ask_all_recipes":
                                        console.log("ASK ALL RECIPES -----------------------------");
                                        // MOSTRAR DE TODAS AS RECEITAS
                                        closeChatBox(); // -------------------------------------------------------------------- Close the chat box
                                        let recipes = await getAllRecipes(); // ----------------------------------------------- Get all the recipes
                                        //printRecipes("RECEITAS ", recipes); // ------------------------------------------------ Print the recipes
                                        addRecipesTable(recipes); // ---------------------------------------------------------- Add the recipes to the page as <table> id = recipes-table
                                        sendToVoice("Segue a lista de todas as receitas disponíveis!"); // -------------------- SEND THE VOICE TO THE USER
                                        voice = c.nlu.audioReconized; // ------------------------------------------------------ Get the voice from the user
                                        openChatBox(); // --------------------------------------------------------------------- Open the chat box
                                        clearChatMessages() // ---------------------------------------------------------------- Clear the chat messages (when asked for a new recipe)
                                        addMsgToChat('Você',': ' + voice); // ------------------------------------------------- Add the voice to the chat
                                        addMsgToChat('Assistente','Escolha uma receita para começar a preparação'); // -------- Add the Assistent message to the chat
                                        break;
                                    case "ask_for_tools":
                                        console.log("ASK FOR TOOLS -----------------------------");
                                        break;
                                    case "ask_for_ingredients":
                                        console.log("ASK FOR INGREDIENTS -----------------------------");
                                        break;
                                    case "ask_spefific_recipe":
                                        console.log("ASK SPECIFIC RECIPE -----------------------------");
                                        closeHelpBox(); // -------------------------------------------------------- Close the help box
                                        clearContent(); // -------------------------------------------------------- Clear the content
                                        console.log("ASK SPECIFIC RECIPE: ");
                                        //console.log("ASK SPECIFIC RECIPE_VALUE: "+c.nlu.recipe);
                                        let tag = c.nlu.recipe; // ------------------------------------------------- Get the recipe tag
                                        let temp_img = await getRecipesByTag(tag); // ------------------------------ Get the recipe_id for the specific recipe
                                        recipe_id = temp_img.recipe_ids[0]; // ------------------------------------- Set the recipe_id for the specific recipe
                                        console.log("RECIPE_ID: ", recipe_id);
                                        step = 1; // --------------------------------------------------------------- Set the step to 1 - to reset the var step
                                        let temp_recipe_name = await getRecipeName(recipe_id); // ------------------ Get the recipe name
                                        let tag_recipe_name = temp_recipe_name.recipe_name; // --------------------- Get the recipe name
                                        console.log("TAG RECIPE NAME: ", tag_recipe_name);
                                        addRecipeName(tag_recipe_name); // ----------------------------------------- Add the recipe name to the page as <h2>
                                        let temp_img_url_tag = await getRecipeImage(recipe_id); // ----------------- Get the recipe image url
                                        let img_url_tag = temp_img_url_tag.img_url; // ----------------------------- Get the recipe image url
                                        addImage(img_url_tag); // -------------------------------------------------- Add the recipe image to the page as <img>
                                        let ingredients_tag = await getIngredients(recipe_id); // ------------------ Get the ingredients for the recipe
                                        addIngredientsTable(ingredients_tag); // ----------------------------------- Add the ingredients to the page as <table> id = ingredients-table
                                        let tools_tag = await getTools(recipe_id); // ------------------------------ Get the tools for the recipe
                                        addToolsTable(tools_tag); // ----------------------------------------------- Add the tools to the page as <table> id = tools-table
                                        // ------------------------------------------------------------------------- SEND THE VOICE TO THE USER
                                        // - THE PUNCTUATION AFFECTS THE TIME BETWEEN THE TWO SENTENCES -
                                        sendToVoice("RECEITA ESCOLHIDA : "+ tag_recipe_name + " . Quando estiver pronto podemos começar a receita");
                                        voice = c.nlu.audioReconized; // ------------------------------------------- Get the voice from the user
                                        openChatBox(); // ---------------------------------------------------------- Open the chat box (for the first interaction)
                                        clearChatMessages() // ----------------------------------------------------- Clear the chat messages (when asked for a new recipe)
                                        addMsgToChat('Você',': ' + voice); // -------------------------------------- Add the voice to the chat
                                        // ------------------------------------------------------------------------- Add the Assistent message to the chat (hint for the user)
                                        addMsgToChat('Assistente','INICIAR A PREPARAÇÃO : Vamos começar com a receita');
                                        break;
                                    case "ask_help":
                                        console.log("ASK HELP -----------------------------");
                                        closeChatBox();
                                        sendToVoice("Segue a lista de comandos aceites para interagir comigo!");
                                        openHelpBox();
                                        break;
                                    case "ask_random_recipe":
                                        console.log("ASK RANDOM RECIPE -----------------------------");
                                        closeHelpBox(); // -------------------------------------------------------- Close the help box
                                        clearContent(); // -------------------------------------------------------- Clear the content
                                        //console.log(c.nlu);
                                        data = await getRandRecipe() // -------------------------------------------- Get the random recipe
                                        recipe_id = data.recipe_id; // --------------------------------------------- Set the recipe_id fer the random recipe
                                        step = 1; // --------------------------------------------------------------- Set the step to 1 - to reset the var step
                                        //console.log("RECIPE_ID : " , recipe_id); 
                                        //console.log("DATA: " , data);
                                        //console.log("DATA PARSING" + data.recipe_name);
                                        let recipe_name = data.recipe_name; // ------------------------------------- Get the recipe name
                                        addRecipeName(recipe_name); // --------------------------------------------- Add the recipe name to the page as <h2>
                                        let img_url = data.recipe_img; // ------------------------------------------ Get the recipe image url
                                        console.log("IMG URL: " + img_url);
                                        addImage(img_url); // ------------------------------------------------------ Add the recipe image to the page as <img>
                                        let ingredients = await getIngredients(data.recipe_id); // ----------------- Get the ingredients for the recipe
                                        addIngredientsTable(ingredients); // --------------------------------------- Add the ingredients to the page as <table> id = ingredients-table
                                        //console.log("INGREDIENTS: ", ingredients);
                                        let tools = await getTools(data.recipe_id); // ----------------------------- Get the tools for the recipe
                                        addToolsTable(tools); // --------------------------------------------------- Add the tools to the page as <table> id = tools-table
                                        //console.log("TOOLS: ", tools);
                                        // ------------------------------------------------------------------------- SEND THE VOICE TO THE USER
                                        // - THE PUNCTUATION AFFECTS THE TIME BETWEEN THE TWO SENTENCES -
                                        sendToVoice("RECEITA ESCOLHIDA : "+ recipe_name + " . Quando estiver pronto podemos começar a receita");
                                        voice = c.nlu.audioReconized; // ------------------------------------------- Get the voice from the user
                                        openChatBox(); // ---------------------------------------------------------- Open the chat box (for the first interaction)
                                        clearChatMessages() // ----------------------------------------------------- Clear the chat messages (when asked for a new recipe)
                                        addMsgToChat('Você',': ' + voice); // -------------------------------------- Add the voice to the chat
                                        // ------------------------------------------------------------------------- Add the Assistent message to the chat (hint for the user)
                                        addMsgToChat('Assistente','INICIAR A PREPARAÇÃO : Vamos começar com a receita');
                                        break;
                                    case "ask_repeat_step":
                                        console.log("ASK REPEAT STEP -----------------------------");
                                        let repeat_instruction = await getActualInstruction(recipe_id, step); // --- Get the actual instruction for the recipe
                                        //console.log("REPEAT INSTRUCTION: ", repeat_instruction.actual_instruction);
                                        voice = c.nlu.audioReconized; // ------------------------------------------- Get the voice from the user
                                        //openChatBox();
                                        addMsgToChat('Você',': ' + voice); // -------------------------------------- Add the voice to the chat
                                        addMsgToChat('Assistente', repeat_instruction.actual_instruction); // ------ Add the actual instruction to the chat
                                        sendToVoice("A instrução é: "+ repeat_instruction.actual_instruction); // -- SEND THE VOICE THE ACTUAL INSTRUCTION
                                        // ------------------------------------------------------------------------- Add the Assistent message to the chat (hint for the user)
                                        addMsgToChat('Assistente','PRÓXIMA INSTRUÇÃO : Avança para o próximo passo');
                                        break;
                                    case "ask_first_step":
                                        console.log("ASK FIRST STEP -----------------------------");
                                        let instruction = await getActualInstruction(recipe_id, step); // ---------- Get the first instruction for the recipe
                                        //console.log("INSTRUCTION: ", instruction.actual_instruction); 
                                        voice = c.nlu.audioReconized; // ------------------------------------------- Get the voice from the user
                                        //openChatBox();
                                        addMsgToChat('Você',': ' + voice); // -------------------------------------- Add the voice to the chat
                                        addMsgToChat('Assistente', instruction.actual_instruction); // ------------- Add the first instruction to the chat
                                        // ------------------------------------------------------------------------- SEND THE VOICE THE FIRST INSTRUCTION
                                        sendToVoice("A primeira instrução é: "+ instruction.actual_instruction);
                                        // ------------------------------------------------------------------------- Add the Assistent message to the chat (hint for the user)
                                        addMsgToChat('Assistente','PRÓXIMA INSTRUÇÃO : Avança para o próximo passo');
                                        break;
                                    case "ask_next_step":
                                        console.log("ASK NEXT STEP -----------------------------");
                                        let next_instruction = await getNextInstruction(recipe_id, step); // ------- Get the next instruction for the recipe
                                        voice = c.nlu.audioReconized;
                                        if (next_instruction == null) { // ----------------------------------------- If there are NO MORE instructions
                                            //console.log("NO MORE INSTRUCTIONS");
                                            //openChatBox();
                                            addMsgToChat('Você',': ' + voice);
                                            addMsgToChat('Assistente','FIM DA RECEITA : A receita terminou');
                                            sendToVoice("A receita terminou");
                                            break;
                                        }else{ // ------------------------------------------------------------------- If there are MORE instructions
                                            step++; // ---------------------------------------------------------------- Increment the step
                                            //console.log("NEXT INSTRUCTION: ", next_instruction.next_instruction);
                                            //openChatBox();
                                            addMsgToChat('Você',': ' + voice); // ------------------------------------- Add the voice to the chat
                                            addMsgToChat('Assistente', next_instruction.next_instruction); // --------- Add the next instruction to the chat
                                            // ------------------------------------------------------------------------ SEND THE VOICE THE NEXT INSTRUCTION
                                            sendToVoice("A próxima instrução é: "+next_instruction.next_instruction); 
                                            // ------------------------------------------------------------------------ Add the Assistent message to the chat (hint for the user) 
                                            addMsgToChat('Assistente','PROXIMA INSTRUÇÃO : Avança para o próximo passo');
                                        }
                                    break;
                                    case "ask_pantry":
                                        console.log("ASK PANTRY -----------------------------");
                                        clearContent(); // -------------------------------------------------------- Clear the content
                                        let pantry_products = await get_pantry_products(); // ---------------------- Get all the products in the pantry
                                        addRecipeName("Produtos na Despensa"); // ------------------------------------ Add the title to the page as <h2>
                                        addPantryTable(pantry_products); // ---------------------------------------- Add the pantry products to the page as <table> id = pantry-table
                                        // ------------------------------------------------------------------------- SEND THE VOICE TO THE USER
                                        sendToVoice("Segue a lista de produtos na despensa!"); // ---------------------- SEND THE VOICE TO THE USER
                                        // O que tenho na despensa
                                        break;
                                    case "add_pantry":
                                        // Adiciona [3](quantidade) [ovos](ingrediente) à despensa
                                        // Comprei [ovos](ingrediente)
                                        console.log("ADD PANTRY -----------------------------");
                                        add_pdb_flag = true; // ------------------------------------------------------ Set the flag to true
                                        let name = c.nlu.name; // ---------------------------------------------------- Get the ingredient
                                        if(name)
                                            product["name"] = name; // ----------------------------------------------- Store the ingredient
                                        let quantity = c.nlu.quantity; // -------------------------------------------- Get the quantity
                                        if(quantity)
                                            product["quantity"] = quantity; // ----------------------------------------- Store the quantity
                                        let unit = c.nlu.unit; // ------------------------------------------------------ Get the unit
                                        if(unit)
                                            product["unit"] = unit; // --------------------------------------------------- Store the unit
    
                                        // name && quantity
                                        // name && unit & quantity
                                        // name 
                                        // 
                                        if(product["name"] && !product["quantity"] && !product["unit"]){
                                            // ask for the quantity
                                            sendToVoice("Indique a quantidade do produto");
                                            mmiCli_12.sendToIM(new LifeCycleEvent("SPEECH_ANSWER", "IM", "text-1", "ctx-1").
                                                doStartRequest(new EMMA("text-", "text", "command", 1, 0).
                                                setValue(JSON.stringify({text: "Get Quantity Ingredient"})))); // ------------ Call the function to get the quantity
                                        }else if(product["name"] && product["quantity"] && !product["unit"]){
                                            // ask for the unit
                                            sendToVoice("Indique a quantidade : EXEMPLO : 5 quilos");
                                            mmiCli_12.sendToIM(new LifeCycleEvent("SPEECH_ANSWER", "IM", "text-1", "ctx-1").
                                                doStartRequest(new EMMA("text-", "text", "command", 1, 0).
                                                setValue(JSON.stringify({text: "Get Unit Ingredient"})))); // ------------ Call the function to get the unit
                                        }else if(product["name"] && product["quantity"] && product["unit"]){
                                            // ask for the expiration_date
                                            if(checkType(product["name"]) == "animal"){
                                                // add a pre-established expiration_date for animal products : 3 DAYS
                                                product["expiration_date"] = set_expiration_date(3); // ---------------------- Set the expiration date
                                                // --------------------------------------------------------------------------- Create the message to the user
                                                insert_stock(); // ----------------------------------------------------------- Insert the product to the pantry
                                                answer = "O produto foi inserido com sucesso" // ------------------------ Create the VOICE message to the user
                                                sendToVoice(answer); // ----------------------------------------------------- Send the voice msg to the user
                                                openChatBox(); // ------------------------------------------------------------ Open the chat box
                                                answer = "O produto "+ product["name"] + " com a quantidade " + product["quantity"] + " " + product["unit"] + " foi adicionado à despensa com a data de validade " + product["expiration_date"];
                                                addMsgToChat("Assistente", answer); // -------------------------------------- Add the message to the chat
                                                reset_product(); // ---------------------------------------------------------- Reset the product dictionary
                                                add_pdb_flag = false; // ----------------------------------------------------- Reset the flag
                                            }else if(checkType(product["name"]) == "plant"){
                                                // add a pre-established expiration_date for plant products : 7 DAYS ( 1 week )
                                                product["expiration_date"] = set_expiration_date(7); // ---------------------- Set the expiration date
                                                // --------------------------------------------------------------------------- Create the message to the user
                                                insert_stock(); // ----------------------------------------------------------- Insert the product to the pantry
                                                answer = "O produto foi inserido com sucesso" // ------------------------ Create the VOICE message to the user
                                                sendToVoice(answer); // ----------------------------------------------------- Send the voice msg to the user
                                                openChatBox(); // ------------------------------------------------------------ Open the chat box
                                                answer = "O produto "+ product["name"] + " com a quantidade " + product["quantity"] + " " + product["unit"] + " foi adicionado à despensa com a data de validade " + product["expiration_date"];
                                                addMsgToChat("Assistente", answer); // -------------------------------------- Add the message to the chat
                                                reset_product(); // ---------------------------------------------------------- Reset the product dictionary
                                                add_pdb_flag = false; // ----------------------------------------------------- Reset the flag
                                            }else{
                                                // ask for the expiration_date
                                                sendToVoice("Indique uma data de validade");
                                                mmiCli_12.sendToIM(new LifeCycleEvent("SPEECH_ANSWER", "IM", "text-1", "ctx-1").
                                                    doStartRequest(new EMMA("text-", "text", "command", 1, 0).
                                                    setValue(JSON.stringify({text: "Get Expiration Date"})))); // ----- Call the function to get the expiration date
                                            }
                                        }
                                        break;
                                    case "add_pantry_barcode":
                                        console.log("ADD PANTRY BARCODE -----------------------------");
                                        clearContent(); // -------------------------------------------------------- Clear the content
                                        add_pdb_flag = true; // ------------------------------------------------------ Set the flag to true
                                        await takeSnapshot(); // ----------------------------------------------------- Read the barcode
                                        sendToVoice("O produto foi lido com sucesso, indique a data de validade"); //- SEND THE VOICE TO THE USER
                                        mmiCli_12.sendToIM(new LifeCycleEvent("SPEECH_ANSWER", "IM", "text-1", "ctx-1").
                                            doStartRequest(new EMMA("text-", "text", "command", 1, 0).
                                            setValue(JSON.stringify({text: "Get Expiration Date"})))); // ------------ Call the function to get the expiration date
                                        break;
                                    case "remove_pantry_barcode":
                                        console.log("REMOVE PANTRY BARCODE -----------------------------");
                                        clearContent(); // -------------------------------------------------------- Clear the content
                                        await takeSnapshot(); // ----------------------------------------------------- Read the barcode
                                        remove_stock(); // ----------------------------------------------------------- Insert the product to the pantry
                                        sendToVoice("O produto foi removido com sucesso, indique a data de validade"); //- SEND THE VOICE TO THE USER
                                        reset_product(); // ---------------------------------------------------------- Reset the product dictionary
                                        break;
                                    case "remove_pantry":
                                        console.log("REMOVE PANTRY -----------------------------");
                                        add_pdb_flag = true; // ------------------------------------------------------ Set the flag to true
                                        let name_rmv = c.nlu.name; // ---------------------------------------------------- Get the ingredient
                                        if(name_rmv)
                                            product["name"] = name_rmv; // ----------------------------------------------- Store the ingredient
                                        let quantity_rmv = c.nlu.quantity; // -------------------------------------------- Get the quantity
                                        if(quantity_rmv)
                                            product["quantity"] = quantity_rmv; // ----------------------------------------- Store the quantity
                                        let unit_rmv = c.nlu.unit; // ------------------------------------------------------ Get the unit
                                        if(unit_rmv)
                                            product["unit"] = unit_rmv; // --------------------------------------------------- Store the unit
    
                                        // name && quantity
                                        // name && unit & quantity
                                        // name 
                                        // 
                                        if(product["name"] && !product["quantity"] && !product["unit"]){
                                            // ask for the quantity
                                            sendToVoice("Indique a quantidade do produto");
                                            mmiCli_12.sendToIM(new LifeCycleEvent("SPEECH_ANSWER", "IM", "text-1", "ctx-1").
                                                doStartRequest(new EMMA("text-", "text", "command", 1, 0).
                                                setValue(JSON.stringify({text: "Get Quantity Ingredient"})))); // ------------ Call the function to get the quantity
                                        }else if(product["name"] && product["quantity"] && !product["unit"]){
                                            // ask for the unit
                                            sendToVoice("Indique a quantidade : EXEMPLO : 5 quilos");
                                            mmiCli_12.sendToIM(new LifeCycleEvent("SPEECH_ANSWER", "IM", "text-1", "ctx-1").
                                                doStartRequest(new EMMA("text-", "text", "command", 1, 0).
                                                setValue(JSON.stringify({text: "Get Unit Ingredient"})))); // ------------ Call the function to get the unit
                                        }else if(product["name"] && product["quantity"] && product["unit"]){
                                            // ask for the expiration_date
                                            if(checkType(product["name"]) == "animal"){
                                                // add a pre-established expiration_date for animal products : 3 DAYS
                                                product["expiration_date"] = set_expiration_date(3); // ---------------------- Set the expiration date
                                                // --------------------------------------------------------------------------- Create the message to the user
                                                remove_stock(); // ----------------------------------------------------------- Insert the product to the pantry
                                                answer = "O produto foi removido com sucesso" // ------------------------ Create the VOICE message to the user
                                                sendToVoice(answer); // ----------------------------------------------------- Send the voice msg to the user
                                                openChatBox(); // ------------------------------------------------------------ Open the chat box
                                                answer = "O produto "+ product["name"] + " com a quantidade " + product["quantity"] + " " + product["unit"] + " foi adicionado à despensa com a data de validade " + product["expiration_date"];
                                                addMsgToChat("Assistente", answer); // -------------------------------------- Add the message to the chat
                                                reset_product(); // ---------------------------------------------------------- Reset the product dictionary
                                                add_pdb_flag = false; // ----------------------------------------------------- Reset the flag
                                            }else if(checkType(product["name"]) == "plant"){
                                                // add a pre-established expiration_date for plant products : 7 DAYS ( 1 week )
                                                product["expiration_date"] = set_expiration_date(7); // ---------------------- Set the expiration date
                                                // --------------------------------------------------------------------------- Create the message to the user
                                                remove_stock(); // ----------------------------------------------------------- Insert the product to the pantry
                                                answer = "O produto foi removido com sucesso" // ------------------------ Create the VOICE message to the user
                                                sendToVoice(answer); // ----------------------------------------------------- Send the voice msg to the user
                                                openChatBox(); // ------------------------------------------------------------ Open the chat box
                                                answer = "O produto "+ product["name"] + " com a quantidade " + product["quantity"] + " " + product["unit"] + " foi adicionado à despensa com a data de validade " + product["expiration_date"];
                                                addMsgToChat("Assistente", answer); // -------------------------------------- Add the message to the chat
                                                reset_product(); // ---------------------------------------------------------- Reset the product dictionary
                                                add_pdb_flag = false; // ----------------------------------------------------- Reset the flag
                                            }else{
                                                // ask for the expiration_date
                                                sendToVoice("Indique uma data de validade");
                                                mmiCli_12.sendToIM(new LifeCycleEvent("SPEECH_ANSWER", "IM", "text-1", "ctx-1").
                                                    doStartRequest(new EMMA("text-", "text", "command", 1, 0).
                                                    setValue(JSON.stringify({text: "Get Expiration Date"})))); // ----- Call the function to get the expiration date
                                            }
                                        }
                                        break;
                                    case "remove_all_pantry":
                                        console.log("REMOVE ALL PANTRY -----------------------------");
                                        break;
                                    case "remove_all_shopping_list":
                                        console.log("REMOVE ALL SHOPPING LIST -----------------------------");
                                        break;
                                    case "add_shopping_list":
                                        console.log("ADD SHOPPING LIST -----------------------------");
                                        break;
                                    case "add_recipe_ingredients_pantry":
                                        console.log("ADD RECIPE INGREDIENTS PANTRY -----------------------------");
                                        break;
                                    case "ask_shopping_list":
                                        console.log("ASK SHOPPING LIST -----------------------------");
                                        clearContent(); // -------------------------------------------------------- Clear the content
                                        s_list = await get_shopping_list(); // ------------------------------------- Get the shopping list
                                        addRecipeName("Lista de Compras"); // ---------------------------------------- Add the title to the page as <h2>
                                        addShoopingListTable(s_list); // ------------------------------------------------- Add the shopping list to the page as <table> id = shopping-list-table
                                        sendToVoice("Segue a lista de compras!"); // -------------------------------------- SEND THE VOICE TO THE USER
                                        break;
                                    case "ask_specific_Pantry":
                                        console.log("ASK SPECIFIC PANTRY -----------------------------");
                                        break;
                                    case "send_shopping_list":
                                        console.log("SEND SHOPPING LIST -----------------------------");
                                        s_list = await get_shopping_list(); // ------------------------------------- Get the shopping list 
                                        //console.log("SHOPPING LIST: ", s_list);
                                        if(s_list.length > 0){
                                            // send the shopping list
                                            send_email("shoopinglist", s_list); // -------------------------------------- SEND EMAIL
                                            console.log("---------> EMAIL SENT <---------");
                                            sendToVoice("A sua lista de compras foi enviada para o seu email"); // ------------ SEND THE VOICE TO THE USER
                                            openChatBox(); // ------------------------------------------------------------ Open the chat box
                                            addMsgToChat("Assistente", "A sua lista de compras foi enviada para o seu email"); // --- Add the message to the chat
                                        }
                                        break;
                                    case "get_quantity_ingredient":
                                        if(add_pdb_flag){
                                            console.log("GET QUANTITY INGREDIENT -----------------------------");
                                            product["quantity"] = c.nlu.quantity; // ------------------------------------- Get & Store the quantity
                                            let unidade = c.nlu.unit; // ------------------------------------------------- Get the unit
                                            if(unidade)
                                                product["unit"] = unidade; // -------------------------------------------- Store the unit
                                            else
                                                product["unit"] = "uni"; // ---------------------------------------------- Infer & Store the unit
                                            let name = c.nlu.name; // ---------------------------------------------------- Get the ingredient
                                            if(name)
                                                product["name"] = name; // ----------------------------------------------- Store the ingredient
    
                                            // --------------------------------------------------------------------------- Check if all the fields are filled
                                            if (product["name"] && product["quantity"] && product["unit"] && !product["expiration_date"]){
                                                // ask for the expiration_date
                                                sendToVoice("Indique uma data de validade");
                                                mmiCli_12.sendToIM(new LifeCycleEvent("SPEECH_ANSWER", "IM", "text-1", "ctx-1").
                                                    doStartRequest(new EMMA("text-", "text", "command", 1, 0).
                                                    setValue(JSON.stringify({text: "Get Expiration Date"})))); // ----- Call the function to get the expiration date
                                            }else{
                                                
                                            }
                                            openChatBox(); // ------------------------------------------------------------ Open the chat box
                                            // --------------------------------------------------------------------------- Create the message to the user
                                            addMsgToChat("Você", "Quantidade: " + product["quantity"] + " " + product["unit"] + " de " + product["name"]);
                                        }else{
                                            console.log("ADD_PDB_FLAG IS FALSE");
                                            openChatBox(); // ------------------------------------------------------------ Open the chat box
                                            addMsgToChat("Assistente", "Primeiro adicione um produto"); // --------------- Add the message to the chat
                                            mmiCli_12.sendToIM(new LifeCycleEvent("SPEECH_ANSWER", "IM", "text-1", "ctx-1").
                                            doStartRequest(new EMMA("text-", "text", "command", 1, 0).
                                            setValue(JSON.stringify({text: "Tente adicionar um produto"})))); // --------- Call the function to get the expiration date
                                        }
                                        break;
                                    case "get_expiration_date":
                                        if (add_pdb_flag){ // ------------------------------------------------------------ Check if already added a product
                                            console.log("GET EXPIRATION DATE -----------------------------");
                                            let expiration_date = c.nlu.expiration_date; // ------------------------------ Get the expiration date
                                            product["expiration_date"] = convertDateToSQLFormat(expiration_date); // ----- Convert the date to SQL format
                                            // --------------------------------------------------------------------------- Create the message to the user
                                            insert_stock(); // ----------------------------------------------------------- Insert the product to the pantry
                                            console.log(" UPDATE PANTRY TABLE"); // -------------------------------------- Update the pantry table
                                            p_list = await get_pantry_products(); // ------------------------------------- Get the shopping list
                                            addPantryTable(p_list); // --------------------------------------------------- Add the shopping list to the page as <table> id = shopping-list-table
                                            answer = "O produto foi inserido com sucesso" // ------------------------ Create the VOICE message to the user
                                            sendToVoice(answer); // ----------------------------------------------------- Send the voice msg to the user
                                            openChatBox(); // ------------------------------------------------------------ Open the chat box
                                            answer = "O produto "+ product["name"] + " com a quantidade " + product["quantity"] + " " + product["unit"] + " foi adicionado à despensa com a data de validade " + product["expiration_date"];
                                            addMsgToChat("Assistente", answer); // -------------------------------------- Add the message to the chat
                                            reset_product(); // ---------------------------------------------------------- Reset the product dictionary
                                            add_pdb_flag = false; // ----------------------------------------------------- Reset the flag
                                        }else{ // ------------------------------------------------------------------------ If the product was NOT added open Mic to add one
                                            console.log("ADD_PDB_FLAG IS FALSE");
                                            openChatBox(); // ------------------------------------------------------------ Open the chat box
                                            addMsgToChat("Assistente", "Primeiro adicione um produto"); // --------------- Add the message to the chat
                                            mmiCli_12.sendToIM(new LifeCycleEvent("SPEECH_ANSWER", "IM", "text-1", "ctx-1").
                                            doStartRequest(new EMMA("text-", "text", "command", 1, 0).
                                            setValue(JSON.stringify({text: "Tente adicionar um produto"})))); // --------- Call the function to get the expiration date
                                        }
                                        break;
                                    case "greet":
                                        closeHelpBox(); // -------------------------------------------------------- Close the help box
                                        console.log("GREET -----------------------------");
                                        active_assistant = true; // ------------------------------------------------ Activate the assistant
                                        openChatBox(); // ---------------------------------------------------------- Open the chat box
                                        addMsgToChat('Assistente','Olá, posso ajudar?'); // ------------------------ Add the Assistent message to the chat
                                        sendToVoice("Olá, posso ajudar?"); // -------------------------------------- Send the voice to the user saying "Olá, posso ajudar?"
                                        if (!alerted){ // ------------------------------------------------------------------------------ Check if the email was already sent
                                            // check if the product is near the expiration date
                                            let product_list = await get_pantry_products(); // ----------------------------------------- Get all the products in the pantry
                                            let near_expiration_date_products = get_near_expiration_date_products(product_list); // ---- Get the products that are near the expiration date
                                            // CONSTRUCT EMAIL 
                                            if (near_expiration_date_products.length > 0){
                                                await send_email("expiration", near_expiration_date_products); // ---------------------- SEND EMAIL
                                                console.log("---------> EMAIL SENT <---------");
                                                alerted = true;
                                                email["body"] = null; // --------------------------------------------------------------- Reset the email body
                                                email["subject"] = null; // ------------------------------------------------------------ Reset the email subject
                                            }
                                            alerted = true;
                                        }
                                        s_list = await get_shopping_list(); // ------------------------------------------------ Get the shopping list
                                        p_list = await get_pantry_products(); // ------------------------------------------------ Get the pantry products
                                        addRecipeName("Despensa"); // ------------------------------------------------------ Add the recipe name to the page as <h2>
                                        addPantryTable(p_list); // ------------------------------------------------------------ Add the pantry table to the page
                                        addShoopingListTable(s_list); // ------------------------------------------------------ Add the shopping list table to the page
                                        break;
                                    case "goodbye":
                                        console.log("GOODBYE -----------------------------");
                                        closeHelpBox(); // -------------------------------------------------------- Close the help box
                                        clearChatMessages(); // ---------------------------------------------------- Clear the chat messages
                                        closeChatBox(); // --------------------------------------------------------- Close the chat box
                                        clearContent(); // --------------------------------------------------------- Clear the content from "conteudo" div
                                        sendToVoice("Espero ter ajudado, até à próxima!!"); // ------------------------------------------- Send the voice to the user saying "Até à próxima"
                                        active_assistant = false; // ------------------------------------------------ Deactivate the assistant
                                        break;
                                    case "affirm":
                                        break;
                                    case "deny":
                                        break;
                                    case "joke":
                                        console.log("JOKES -----------------------------");
                                        openChatBox();
                                        let joke_selected = getRandJoke();
                                        addMsgToChat('Assistente',joke_selected); // --------- Add the joke to the chat
                                        sendToVoice(joke_selected);
                                        break;
                                    case "default":
                                        console.log("DEFAULT -----------------------------");
                                        break;
                                }
                                // end switch

                            }else{
                                sendToVoice("Para ativar o Assistente diga: Olá Assistente");
                                mmiCli_12.sendToIM(new LifeCycleEvent("SPEECH_ANSWER", "IM", "text-1", "ctx-1").
                                        doStartRequest(new EMMA("text-", "text", "command", 1, 0).
                                        setValue(JSON.stringify({text: "GREET ASSISTANT TO INICIATE"})))); // ------------ Call the function to get the expiration da
                            }

                        }
                    }catch (e) {
                         console.log(e); 
                    }
                }
            }
        }


        /////

        var mmiCli_1 = null;
        mmiCli_1 = new MMIClient(null, "https://"+host+":8000/IM/USER1/APPSPEECH");


        function speakText(text) {
            const utterance = new SpeechSynthesisUtterance(text);
            speechSynthesis.speak(utterance);
        }


        function sendToVoice(texto){
            //console.log("TESTE SEND TO VOICE: ", texto);
            //let speak = "&lt;speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.w3.org/2001/10/synthesis http://www.w3.org/TR/speech-synthesis/synthesis.xsd\" xml:lang=\"pt-PT\"&gt;&lt;p&gt;" + "quadrado" + "&lt;/p&gt;&lt;/speak&gt";
            //let speak = "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.w3.org/2001/10/synthesis http://www.w3.org/TR/speech-synthesis/synthesis.xsd\" xml:lang=\"pt-PT\"><p>"+texto+"</p></speak>";
            //let speak = `<speak version="1.1" xmlns="http://www.w3.org/2001/10/synthesis" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/TR/speech-synthesis11/synthesis.xsd" xml:lang="pt-PT"><p>${texto}</p></speak>`;

            //var result = speak;
            //mmiCli_1 = new MMIClient(null, "https://"+host+":8000/IM/USER1/APPSPEECH");
            
            // WORKING SPEECH 
            var synth = window.speechSynthesis;
            var utterance = new SpeechSynthesisUtterance(texto);
            utterance.lang = 'pt-PT'; // Set the language to Portuguese (Portugal)
            synth.speak(utterance);
        }
        
        

        // code to send a message to the IM -------------------------------------------------------------------
        var mmiCli_12 = new MMIClient(null, "https://"+host+":8000/IM/USER1/SPEECH_ANSWER");


        //mmiCli_12.sendToIM(new LifeCycleEvent("SPEECH_ANSWER", "IM", "text-1", "ctx-1").
        //        doStartRequest(new EMMA("text-", "text", "command", 1, 0).
        //        setValue(JSON.stringify({text: "TESTEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"}))));

        // -----------------------------------------------------------------------------------------------------

    </script>
  </body>
</html>