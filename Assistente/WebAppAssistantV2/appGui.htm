<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>CASA VIVA + APPGUI</title>

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@500&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <!--FontAwesome-->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="js/chat.js"></script>
    
    <style>
      body {
        --indicator-color: black;
        background: #fff; /*radial-gradient(#fff 75%, var(--indicator-color));*/
        min-height: 100vh;
        color: burlywood;
        font-family: Poppins;
        margin: 0;
        padding: 0;
      }
      .mic{
        width: 150px;
      }
      .container {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100%;
        border-radius: 10px;
        background-color: #f0f0f0;
      }

      .responseText{
        border: solid 2px #8ea7cf;
        margin: 2%;
        color: #010101;
      }

      .bottomNav{
        
        position: absolute;
        bottom: 2%;
        width: 95%;
      }
      .recognized{
        font-size:x-large;
      }
      #chat-button {
        position: center;
        width: 75px;
        height: 75px;
      }
    
      #chat-box {
          max-height: 400px;
          overflow-y: auto;
          /* Permite Scroll Vertical */
      }
      
      #chat-messages {
          margin-right: 15px;
      }
      
      #conteudo {
        display: flex;
        flex-direction: column;
        align-items: center; /* Centraliza os itens horizontalmente se desejar */
      }
      
      #conteudo h2, #conteudo img, #conteudo table {
        margin-bottom: 20px; /* Ajuste conforme necessário */
      }

      #conteudo th, #conteudo td {
        font-size: 12px; /* Ajuste para o tamanho desejado */
      }

      h1 {
          background-color: #4F5D73;
          color: burlywood;
          text-align: center;
          font-family: 'Florilla Fista', sans-serif;
          text-shadow: 1px 1px 1px black;
      }
      h2 {
          color: black;
          text-align: center;
          font-family: 'Florilla Fista', sans-serif;
          text-shadow: 1px 1px 1px white;
          /* offsetX, offsetY, blurRadius, color */
      }

      #image-container {
        display: flex;
        justify-content: center; /* Centraliza horizontalmente */
        align-items: flex-start; /* Alinha ao topo */
      }
    
      #table-container {
          display: flex;
          flex-direction: row; /* Alinha os elementos filhos lado a lado */
          justify-content: center; /* Centraliza os elementos filhos horizontalmente */
          flex-wrap: wrap; /* Permite que os elementos filhos se ajustem conforme a largura do contêiner */
          gap: 5px; /* Adiciona um espaço entre as tabelas */
      }
      
      #table-container table {
        width: auto; /* ou uma largura específica que permita que duas tabelas caibam lado a lado */
        /*max-width: 90%; /* Isso assegura que duas tabelas possam caber lado a lado */
      }
      
      img {
          width: 250px;
          height: 250px;
      }
    
      .sender {
        color: blue;
      }
      
      .message {
          color: black;
      }

      table {
        /*top : 100%; */
        width: 100%;
        border-collapse: collapse;
      }
      
      th, td {
          border: 1px solid black;
          padding: 8px;
          text-align: left;
      }
      
      thead {
          background-color: #4F5D73;
          color: white;
      }

    </style>

  </head>
  <body>
    <h1 style="background-color: #4F5D73; margin: 0;">CASA VIVA + APP GUI</h1>

    
    <div>
      
      <div id = "conteudo">
        <!--PARA POSTERIORMENTE APARECEREM A IMAGEM-->  
        
        <div id="title">

        </div>
        
        <div id="image-container">

        </div>

        <div id="table-container">

        </div>
      </div>

      <!--ChatBox-->
      <div id="chat-box" class="card position-fixed shadow d-none" style="bottom: 100px; right: 35%;width: 400px;">
          <div class="card-head bg-primary text-white">
              KitchenAssistant
              <!-- <button id="close" type="button" class="btn-close float-end" aria-label="Close"></button> -->
  
          </div>
  
          <div id="chat-messages" class="card-body">
              <!-- Mensagens do chat aparecerão aqui-->
  
          </div>
  
          <div class="card-footer">
              <input id="chat-input" type="text" class="form-control" placeholder="Digite sua mensagem">
  
          </div>


  
      </div>

      <button id="chat-button" type="button" class="btn btn-primary rounded-circle position-fixed chat-sign-button" style="bottom: 20px;right: 50%;">
        <i class="fa-regular fa-message fa-2x"></i>
      </button>
  
    </div>

    <script src="https://cdn.jsdelivr.net/npm/@svgdotjs/svg.js@latest/dist/svg.min.js"></script>
    <script src="js/mmi.js"></script>
    <script src="js/globals.js"></script>
    <script src="js/jquery-3.6.4.min.js"></script>
    <script src="js/webtoolkit.utf8.js"></script>



    <script type="module">


      var mmiCli_Out_add = "wss://"+host+":8005/IM/USER1/";
      var mmiCli_Out = null;
      mmiCli_Out = new MMIClientSocket(mmiCli_Out_add + "APP");
      mmiCli_Out.onMessage.on(im1MessageHandler);
      mmiCli_Out.onOpen.on(socketOpenHandler);
      mmiCli_Out.openSocket();


      function socketOpenHandler(event) {
        console.log("---------------openSocketHandler---------------")

        if(mmiCli_Out.socket.readyState !== WebSocket.OPEN)
        {
            return;
        }
      }

      /* UNUSED CODE
      let circle = SVG.find('.circle');
      let square = SVG.find('.square');
      let triangle = SVG.find('.triangle');

      circle.animate().attr({fill:'#ccc'});
      square.animate().attr({fill:'#ccc'});
      triangle.animate().attr({fill:'#ccc'});
      */

      function openChatBox() {
        $("#chat-box").removeClass("d-none");
      }

      function addMsgToChat(user, message){
        // Determine the sender
        let sender = user;
        // Append the message to the chat
        $("#chat-messages").append(`<div><strong class="sender">${sender}:</strong> <span class="message">${message}</span></div>`);
      }

      function addRecipeName(recipe_name) {
        let container = document.getElementById("title");
        // Verifica se já existe um elemento h2 dentro do contêiner
        let existingH2 = container.querySelector("h2");
    
        // Se já existir um h2, atualiza o texto
        if (existingH2) {
            existingH2.textContent = recipe_name;
        } else {
            // Se não, cria um novo h2 e adiciona ao contêiner
            let name = document.createElement("h2");
            name.textContent = recipe_name;
            container.appendChild(name);
        }
      }
      
      function addImage(img_url) {
        let container = document.getElementById("image-container");
        // Verifica se já existe uma imagem dentro do contêiner
        let existingImg = container.querySelector("img");
    
        // Se já existir uma imagem, atualiza o atributo src
        if (existingImg) {
            existingImg.src = img_url;
        } else {
            // Se não, cria uma nova imagem e adiciona ao contêiner
            let img = document.createElement("img");
            img.src = img_url;
            container.appendChild(img);
        }
      }
      
      function addIngredientsTable(ingredients) {
        let container = document.getElementById("table-container");
        // Verifica e remove a tabela existente de ingredientes
        let existingTable = container.querySelector("#ingredients-table");
        if (existingTable) {
            container.removeChild(existingTable);
        }
        
        // Cria a nova tabela de ingredientes
        let table = document.createElement("table");
        table.id = "ingredients-table"; // Adiciona um ID único
        let thead = document.createElement("thead");
        let tbody = document.createElement("tbody");
        let rowHead = document.createElement("tr");
        
        // Define os títulos das colunas
        let headers = ["Ingrediente", "Valor", "Quantidade"];
        headers.forEach(headerText => {
            let header = document.createElement("th");
            header.textContent = headerText;
            rowHead.appendChild(header);
        });
        
        thead.appendChild(rowHead);
        table.appendChild(thead);
        
        // Adiciona os dados dos ingredientes no corpo da tabela
        ingredients.forEach(ingredient => {
            let row = document.createElement("tr");
            
            let nameCell = document.createElement("td");
            nameCell.textContent = ingredient.name;
            row.appendChild(nameCell);
            
            let quantityCell = document.createElement("td");
            quantityCell.textContent = ingredient.quantity;
            row.appendChild(quantityCell);
            
            let unitCell = document.createElement("td");
            unitCell.textContent = ingredient.unit;
            row.appendChild(unitCell);
            
            tbody.appendChild(row);
        });
        
        table.appendChild(tbody);
        container.appendChild(table);
     }
    
     function addToolsTable(tools) {
      let container = document.getElementById("table-container");
      // Verifica e remove a tabela existente de utensílios
      let existingTable = container.querySelector("#tools-table");
      if (existingTable) {
          container.removeChild(existingTable);
      }
      
      // Cria a nova tabela de utensílios
      let table = document.createElement("table");
      table.id = "tools-table"; // Adiciona um ID único
      let thead = document.createElement("thead");
      let tbody = document.createElement("tbody");
      let rowHead = document.createElement("tr");
      let header = document.createElement("th");
      header.textContent = "Utensílios";
      rowHead.appendChild(header);
      thead.appendChild(rowHead);
      table.appendChild(thead);
      
      // Adiciona os dados dos utensílios no corpo da tabela
      tools.forEach(tool => {
          let row = document.createElement("tr");
          let cell = document.createElement("td");
          cell.textContent = tool[0]; // Considerando que cada ferramenta é um elemento em um array
          row.appendChild(cell);
          tbody.appendChild(row);
      });
      
      table.appendChild(tbody);
      container.appendChild(table);
    }
  
      /* FUNCTION : GET RANDOM RECIPE
      RETURN: 
      {
        "recipe_id": ,
        "recipe_img": ,
        "recipe_name": 
      }*/
      async function getRandRecipe() {
            const response = await fetch('http://127.0.0.1:5000/recipe/random');
            const data = await response.json();
            console.log("DATA INSIDE GET FUNCTION: ", data);
            return data;
      }

      /* FUNCTION : GET ALL RECIPES
      RETURN: 
      [
        {
          "recipe_name": ,
          "recipe_servings": ,
          "recipe_time":
        },
        {
          "recipe_name": ,
          "recipe_servings": ,
          "recipe_time":
        },
        {
          "recipe_name": ,
          "recipe_servings": ,
          "recipe_time":
        },
        ... 
      ]*/
      async function getAllRecipes() {
        const response = await fetch('http://127.0.0.1:5000/recipes');
        const data = await response.json();
        console.log("All Recipes: ", data);
        return data;
      }
      
      /* FUNCTION : GET RECIPES BY TAG
      RETURN: 
      {
        "recipe_ids": [id]
      }*/
      async function getRecipesByTag(tag) {
        const response = await fetch(`http://127.0.0.1:5000/recipe/tag/${tag}`);
        const data = await response.json();
        console.log(`Recipes with tag ${tag}: `, data);
        return data;
      }
      
      /* FUNCTION : GET RECIPES BY NAME - NOT WORKING -
      RETURN: 
      {
        "recipe_id": 
      }*/
      async function getRecipeByName(name) {
        const response = await fetch(`http://127.0.0.1:5000/recipe/name/${encodeURIComponent(name)}`);
        const data = await response.json();
        console.log(`Recipe named ${name}: `, data);
        return data;
      }
      
      /* FUNCTION : GET INGREDIENTS BY RECIPE_ID
      RETURN: 
      [
        {
          "name": "ingredient1",
          "quantity": "4.00",
          "unit": "uni"
        },
        {
          "name": "ingredient2",
          "quantity": "4.00",
          "unit": "uni"
        },
        ... 
      ]*/
      async function getIngredients(recipeId) {
        const response = await fetch(`http://127.0.0.1:5000/recipe/${recipeId}/ingredients`);
        const data = await response.json();
        console.log(`Ingredients for recipe ID ${recipeId}: `, data);
        return data;
      }

      /* FUNCTION : GET TOOLS BY RECIPE_ID
      RETURN: 
      [
        [
          "tool1"
        ],
        [
          "tool2"
        ],
        ...
      ]*/
      async function getTools(recipeId) {
        const response = await fetch(`http://127.0.0.1:5000/recipe/${recipeId}/tools`);
        const data = await response.json();
        console.log(`Tools for recipe ID ${recipeId}: `, data);
        return data;
      }

      /* FUNCTION : GET NEXT INSTRUCTION BY RECIPE_ID AND STEP
      STEP = 0 -> FIRST INSTRUCTION (STEP 1)
      STEP = 1 -> SECOND INSTRUCTION (STEP 2)
      ...
      STEP = N -> N+1 INSTRUCTION (STEP N+1) -> RETURN NULL
      RETURN: 
      {
        "next_instruction": "instruction"
      }*/
      async function getNextInstruction(recipeId, step) {
        const response = await fetch(`http://127.0.0.1:5000/recipe/${recipeId}/next-instruction/${step}`);
        const data = await response.json();
        console.log(`Next instruction for recipe ID ${recipeId} and step ${step}: `, data);
        return data;
      }
      
      /* FUNCTION : GET PREVIOUS INSTRUCTION BY RECIPE_ID AND STEP
      STEP = 0 -> FIRST INSTRUCTION (STEP -1) -> RETURN NULL
      STEP = 1 -> SECOND INSTRUCTION (STEP 0) -> RETURN NULL
      STEP = 2 -> THIRD INSTRUCTION (STEP 1) -> RETURN FIRST INSTRUCTION
      ...
      STEP = N -> N-1 INSTRUCTION (STEP N) -> RETURN N INSTRUCTION
      RETURN: 
      {
        "previous_instruction": "instruction"
      }*/
      async function getPreviousInstruction(recipeId, step) {
        const response = await fetch(`http://127.0.0.1:5000/recipe/${recipeId}/previous-instruction/${step}`);
        const data = await response.json();
        console.log(`Previous instruction for recipe ID ${recipeId} and step ${step}: `, data);
        return data;
      }

      /* FUNCTION : GET ACTUAL INSTRUCTION BY RECIPE_ID AND STEP
      STEP = 0 -> 0 INSTRUCTION (STEP -1) -> RETURN NULL
      STEP = 1 -> FIRST INSTRUCTION (STEP 1) -> RETURN FIRST INSTRUCTION
      STEP = 2 -> SECOND INSTRUCTION (STEP 2) -> RETURN SECOND INSTRUCTION
      ...
      STEP = N -> N INSTRUCTION (STEP N) -> RETURN N INSTRUCTION
      RETURN: 
      {
        "previous_instruction": "instruction"
      }*/
      async function getActualInstruction(recipeId, step) {
        const response = await fetch(`http://127.0.0.1:5000/recipe/${recipeId}/actual-instruction/${step}`);
        const data = await response.json();
        console.log(`Actual instruction for recipe ID ${recipeId} and step ${step}: `, data);
        return data;
      }
    
      var recipe_id = 0;

      async function im1MessageHandler(data) {

        console.log("--------------im1MessageHandler---------------");

        if(data != null && data!="RENEW" && data!="OK") {
          console.log(data);
          var content = $(data).find("emma\\:interpretation").first().text().trim();
          console.log("CONTENTE ------> "+content);
          if (typeof content == 'string') {
            try {
              // Try to parse XML
              console.log("INSIDE TRY CATCH: " + content);

              //$("#response").html(content);
              //$("#response").addClass("container");
              //$("#response").addClass("responseText");

              // Parse JSON from XML content index.htm
              let c = JSON.parse(content);
              let recipe;
              


              if(c.hasOwnProperty("nlu")){
                recipe = c.nlu.intent;
                switch(c.nlu.intent){
                  case "ask_specific_recipe":
                    console.log(c.nlu.entity);
                    break;
                  case "greet":
                    break;
                  case "goodbye":
                    break;
                  case "ask_random_recipe":
                    //console.log(c.nlu);
                    data = await getRandRecipe()
                    recipe_id = data.recipe_id;
                    console.log("RECIPE_ID : " , recipe_id);
                    console.log("DATA: " , data);
                    console.log("DATA PARSING" + data.recipe_name);
                    let recipe_name = data.recipe_name;
                    addRecipeName(recipe_name);
                    let img_url = data.recipe_img;
                    console.log("IMG URL: " + img_url);
                    addImage(img_url);
                    let ingredients = await getIngredients(data.recipe_id);
                    addIngredientsTable(ingredients);
                    console.log("INGREDIENTS: ", ingredients);
                    let tools = await getTools(data.recipe_id);
                    addToolsTable(tools);
                    console.log("TOOLS: ", tools);
                    // THE PUNCTUATION AFFECTS THE TIME BETWEEN THE TWO SENTENCES
                    sendToVoice("RECEITA ESCOLHIDA : "+ recipe_name + " . PARA MOSTRAR A PREPARAÇÃO DIGA: VAMOS COMEÇAR COM A RECEITA");
                    let user_audio = c.nlu.audioReconized;
                    openChatBox();
                    addMsgToChat('Você',': ' + user_audio);
                    addMsgToChat('Assistente','Para Mostrar a Preparação, diga : Vamos começar com a receita');
                    break;
                  case "ask_first_step":
                    console.log("ASK FIRST STEP -----------------------------");
                    let instruction = await getActualInstruction(recipe_id, 1);
                    console.log("INSTRUCTION: ", instruction.actual_instruction);
                    let first_step = c.nlu.audioReconized;
                    openChatBox();
                    addMsgToChat('Você',': ' + first_step);
                    addMsgToChat('Assistente', instruction.actual_instruction);
                    sendToVoice(instruction.actual_instruction);
                    break;
                  case "ask_repeat_step":
                    break;
                  case "ask_next_step":
                    break;
                  case "affirm":
                    break;
                  case "deny":
                    break;
                  case "repeat_step":
                    break;
                  case "confirm_step":
                    break;
                  case "joke":
                    break;
                  case "default":
                    break;
                }


              }
              
              /* UNUSED CODE
              if (c.hasOwnProperty("nlu") && c.nlu.intent=="change_color") {
                switch(c.nlu.shape.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '')){
                  case 'triangulo': shape = triangle; break;
                  case 'quadrado': shape = square; break;
                  case 'circulo': shape = circle; break;
                }

                switch(c.nlu.color.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '')){
                  case 'azul': color = "#3333FF"; break;
                  case 'verde': color = "#33FF33"; break;
                  case 'cinzento': color = "#aaa"; break;
                  case 'vermelho': color = "#FF3333"; break;
                  case 'branco': color = "#fff"; break;
                  case 'rosa': color = "#ff66b2"; break;
                  case 'amarelo': color = "#ffff33"; break;
                  case 'preto': color = "#000"; break;
                  case 'laranja': color = "#FF9933"; break;
                }
                


                
                shape.animate().attr({ fill: color });
                sendToVoice("Mudei o " + c.nlu.shape + " para a cor " + c.nlu.color);
              }
              */

              
              /* UNUSED CODE
              setTimeout(function(){
                $("#response").html("");
                $("#response").removeClass("container");
                $("#response").removeClass("responseText");
              }, 3000);
              */
            }
            catch (e) { console.log(e); }
          }
        }
      }


    /////

      var mmiCli_1 = null;
      mmiCli_1 = new MMIClient(null, "https://"+host+":8000/IM/USER1/APPSPEECH");

      /* UNUSED CODE TO SEND TO VOICE
      circle.on('click', function(){
          console.log("circulo");
          sendToVoice("circulo");
      })

      square.on('click', function(){
          console.log("quadrado");
          sendToVoice("quadradoç");
      })

      triangle.on('click', function(){
          console.log("triangulo");
          sendToVoice("triangulo");
      })
      */

      /*
      function speakText(text) {
        function setVoiceAndSpeak() {
            const utterance = new SpeechSynthesisUtterance(text);
            utterance.lang = 'pt-PT';
            const voices = speechSynthesis.getVoices();
            const voice = voices.find(voice => voice.lang === 'pt-PT');
            if (voice) {
                utterance.voice = voice;
            }
            speechSynthesis.speak(utterance);
        }
    
        if (speechSynthesis.onvoiceschanged !== undefined) {
            speechSynthesis.onvoiceschanged = setVoiceAndSpeak;
        } else {
            setVoiceAndSpeak();
        }
     }*/
    
     function speakText(text) {
      const utterance = new SpeechSynthesisUtterance(text);
      speechSynthesis.speak(utterance);
      }
  
     
    

      function sendToVoice(texto){
        //let speak = "&lt;speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.w3.org/2001/10/synthesis http://www.w3.org/TR/speech-synthesis/synthesis.xsd\" xml:lang=\"pt-PT\"&gt;&lt;p&gt;" + "quadrado" + "&lt;/p&gt;&lt;/speak&gt";
      //let speak = "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.w3.org/2001/10/synthesis http://www.w3.org/TR/speech-synthesis/synthesis.xsd\" xml:lang=\"pt-PT\"><p>"+texto+"</p></speak>";
      let speak = `<speak version="1.1" xmlns="http://www.w3.org/2001/10/synthesis" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/TR/speech-synthesis11/synthesis.xsd" xml:lang="pt-PT"><p>${texto}</p></speak>`;

      var result = speak;
          mmiCli_1.sendToIM(new LifeCycleEvent("APPSPEECH", "IM", "text-1", "ctx-1").
              doStartRequest(new EMMA("text-", "text", "command", 1, 0).
                setValue(JSON.stringify(result))));
      }
      
      /////////////////////////////////////////
    </script> 
  </body>
</html>